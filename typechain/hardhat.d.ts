/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IJar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJar__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "IUniswapRouterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterV2__factory>;
    getContractFactory(
      name: "HuckleberryERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HuckleberryERC20__factory>;
    getContractFactory(
      name: "HuckleberryFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HuckleberryFactory__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IHuckleberryCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHuckleberryCallee__factory>;
    getContractFactory(
      name: "IHuckleberryFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHuckleberryFactory__factory>;
    getContractFactory(
      name: "ILiquidityPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidityPair__factory>;
    getContractFactory(
      name: "LiquidityPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityPair__factory>;
    getContractFactory(
      name: "FINN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FINN__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MasterChefUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChefUtil__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "RERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RERC20__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "BaseStrategyMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategyMasterChef__factory>;
    getContractFactory(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterChef__factory>;
    getContractFactory(
      name: "StrategyFarmTwoAssets",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyFarmTwoAssets__factory>;
    getContractFactory(
      name: "StrategyTwoAssets",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyTwoAssets__factory>;
    getContractFactory(
      name: "JarBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JarBase__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "VaultBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultBase__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IJar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IJar>;
    getContractAt(
      name: "IStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "IUniswapRouterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterV2>;
    getContractAt(
      name: "HuckleberryERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HuckleberryERC20>;
    getContractAt(
      name: "HuckleberryFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HuckleberryFactory>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IHuckleberryCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHuckleberryCallee>;
    getContractAt(
      name: "IHuckleberryFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHuckleberryFactory>;
    getContractAt(
      name: "ILiquidityPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidityPair>;
    getContractAt(
      name: "LiquidityPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityPair>;
    getContractAt(
      name: "FINN",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FINN>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MasterChefUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChefUtil>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "RERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RERC20>;
    getContractAt(
      name: "BaseStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategy>;
    getContractAt(
      name: "BaseStrategyMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategyMasterChef>;
    getContractAt(
      name: "IMasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterChef>;
    getContractAt(
      name: "StrategyFarmTwoAssets",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyFarmTwoAssets>;
    getContractAt(
      name: "StrategyTwoAssets",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyTwoAssets>;
    getContractAt(
      name: "JarBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JarBase>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "VaultBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultBase>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
